import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { dirname, resolve as pathResolve } from "path";
import { createRequire } from "module";
import { copy, pathExists, outputFile } from "fs-extra";

const require = createRequire(import.meta.url);
const manifest = require("./manifest.json");
// # Knobs
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;
const OUTPUT_FILENAME = "main.js";

const prod = process.argv[2] === "production";
const isDev = process.argv[2] === "dev";
const VAULT_ENV = process.env?.OBSIDIAN_TEST_VAULT || null;
const _PLUGINS_FOLDER = ".obsidian/plugins";
const _PLUGIN_NAME = process.env?.OBSIDIAN_TEST_PLUGIN_NAME || manifest.name;

const isLiveDev = VAULT_ENV && process.argv[2] === "dev:live";

const buildFig = {
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	watch: isDev,
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [],
};

// # Rudimentary Live Dev in Prepration of future hot reload feature

const moveArtifactsPluginFig = {
	name: "plugin:move-artifacts",
	setup(build) {
		// const dir = prod ? ARTIFACTS_DIR : dirname();
		build.onEnd(pipeCopy);
		async function pipeCopy() {
			const destinationFilepath = await genDestinationFilepath();
			const pluginDir = dirname(destinationFilepath);

			await outputFile("./dist/manifest.json", JSON.stringify(manifest));
			await copy(
				"./dist/manifest.json",
				pathResolve(pluginDir, "manifest.json")
			);
			await copy(
				"./" + OUTPUT_FILENAME,
				pathResolve(pluginDir, OUTPUT_FILENAME)
			);
			await copy(
				"./" + "styles.css",
				pathResolve(pluginDir, "style.scss")
			);
		}
	},
};
if (isLiveDev) {
	// buildFig.outdir = _ARTIFACTS_DIR;
	manifest.name = _PLUGIN_NAME;
	buildFig.plugins.push(moveArtifactsPluginFig);
}

esbuild.build(buildFig).catch(() => process.exit(1));

// # util
function manuOutFileFig(config = {}) {
	const fig = {
		VAULT_ENV,
		_PLUGIN_NAME,
		_PLUGINS_FOLDER,
	};
	Object.assign(fig, config);
	return fig;
}
async function genDestinationFilepath(
	filename = OUTPUT_FILENAME,
	config = manuOutFileFig()
) {
	const { VAULT_ENV, _PLUGIN_NAME, _PLUGINS_FOLDER } = config;
	const _HOUSING = pathResolve(VAULT_ENV, _PLUGINS_FOLDER);
	if (await !pathExists(_HOUSING)) {
		console.error({ err: _HOUSING, errDesc: "bad folder" });
		process.exit(1);
	}
	return pathResolve(VAULT_ENV, _PLUGINS_FOLDER, _PLUGIN_NAME, filename);
}
